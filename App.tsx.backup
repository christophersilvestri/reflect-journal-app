import React, { useState, useEffect, useRef } from 'react';
import { StatusBar } from 'expo-status-bar';
import { 
  StyleSheet, 
  Text, 
  View, 
  TouchableOpacity, 
  TextInput, 
  ScrollView, 
  Alert,
  KeyboardAvoidingView,
  Platform
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';

interface JournalEntry {
  id: string;
  title: string;
  content: string;
  createdAt: Date;
  updatedAt: Date;
}

const STORAGE_KEY = 'reflect_journal_entries';

export default function App() {
  const [entries, setEntries] = useState<JournalEntry[]>([]);
  const [currentEntry, setCurrentEntry] = useState<JournalEntry | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [contentHeight, setContentHeight] = useState(200);
  const [deleteConfirmId, setDeleteConfirmId] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selection, setSelection] = useState({ start: 0, end: 0 });
  const contentInputRef = useRef<TextInput>(null);

  // Load entries from storage on app start
  useEffect(() => {
    loadEntries();
  }, []);

  const loadEntries = async () => {
    try {
      const storedEntries = await AsyncStorage.getItem(STORAGE_KEY);
      if (storedEntries) {
        const parsedEntries = JSON.parse(storedEntries).map((entry: any) => ({
          ...entry,
          createdAt: new Date(entry.createdAt),
          updatedAt: new Date(entry.updatedAt)
        }));
        setEntries(parsedEntries);
      }
    } catch (error) {
      console.error('Error loading entries:', error);
      if (typeof window !== 'undefined') {
        window.alert('Error loading your entries. Starting with a fresh journal.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const saveEntriesToStorage = async (newEntries: JournalEntry[]) => {
    try {
      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(newEntries));
    } catch (error) {
      console.error('Error saving entries:', error);
      if (typeof window !== 'undefined') {
        window.alert('Error saving your entries. Please try again.');
      }
    }
  };

  const createNewEntry = () => {
    const newEntry: JournalEntry = {
      id: Date.now().toString(),
      title: '',
      content: '',
      createdAt: new Date(),
      updatedAt: new Date()
    };
    setCurrentEntry(newEntry);
    setTitle('');
    setContent('');
    setContentHeight(200);
    setIsEditing(true);
  };

  const insertText = (textToInsert: string) => {
    const before = content.slice(0, selection.start);
    const after = content.slice(selection.end);
    const newContent = before + textToInsert + after;
    setContent(newContent);
    
    // Set cursor position after inserted text
    const newPosition = selection.start + textToInsert.length;
    setSelection({ start: newPosition, end: newPosition });
    
    // Focus the input after insertion
    setTimeout(() => {
      contentInputRef.current?.focus();
      contentInputRef.current?.setSelection(newPosition, newPosition);
    }, 100);
  };

  const applyBold = () => {
    if (selection.start === selection.end) {
      insertText('**bold text**');
    } else {
      const selectedText = content.slice(selection.start, selection.end);
      const before = content.slice(0, selection.start);
      const after = content.slice(selection.end);
      const newContent = before + `**${selectedText}**` + after;
      setContent(newContent);
      
      // Update selection to include the formatting
      const newSelection = {
        start: selection.start,
        end: selection.end + 4 // +4 for the ** markers
      };
      setSelection(newSelection);
      
      setTimeout(() => {
        contentInputRef.current?.focus();
        contentInputRef.current?.setSelection(newSelection.start, newSelection.end);
      }, 100);
    }
  };

  const applyItalic = () => {
    if (selection.start === selection.end) {
      insertText('*italic text*');
    } else {
      const selectedText = content.slice(selection.start, selection.end);
      const before = content.slice(0, selection.start);
      const after = content.slice(selection.end);
      const newContent = before + `*${selectedText}*` + after;
      setContent(newContent);
      
      // Update selection to include the formatting
      const newSelection = {
        start: selection.start,
        end: selection.end + 2 // +2 for the * markers
      };
      setSelection(newSelection);
      
      setTimeout(() => {
        contentInputRef.current?.focus();
        contentInputRef.current?.setSelection(newSelection.start, newSelection.end);
      }, 100);
    }
  };

  const insertBullet = () => {
    insertText('\n• ');
  };

  const insertHeading = () => {
    // Insert heading at the beginning of the current line
    const lines = content.split('\n');
    const currentLineIndex = content.substring(0, selection.start).split('\n').length - 1;
    
    if (lines[currentLineIndex] && !lines[currentLineIndex].startsWith('#')) {
      lines[currentLineIndex] = '# ' + lines[currentLineIndex];
      const newContent = lines.join('\n');
      setContent(newContent);
      
      // Update cursor position
      const newPosition = selection.start + 2;
      setSelection({ start: newPosition, end: newPosition });
      
      setTimeout(() => {
        contentInputRef.current?.focus();
        contentInputRef.current?.setSelection(newPosition, newPosition);
      }, 100);
    } else {
      insertText('\n# ');
    }
  };

  const renderFormattedContent = (text: string) => {
    // Simple markdown rendering
    const lines = text.split('\n');
    return lines.map((line, index) => {
      if (line.startsWith('# ')) {
        return (
          <Text key={index} style={styles.headingText}>
            {line.substring(2)}
          </Text>
        );
      } else if (line.startsWith('• ')) {
        return (
          <Text key={index} style={styles.bulletText}>
            {line}
          </Text>
        );
      } else {
        // Apply bold and italic formatting
        let formattedLine = line;
        formattedLine = formattedLine.replace(/\*\*(.*?)\*\*/g, (match, text) => {
          return `__BOLD__${text}__BOLD__`;
        });
        formattedLine = formattedLine.replace(/\*(.*?)\*/g, (match, text) => {
          return `__ITALIC__${text}__ITALIC__`;
        });

        const parts = formattedLine.split(/(__BOLD__|__ITALIC__)/);
        const elements = parts.map((part, partIndex) => {
          if (part === '__BOLD__') {
            const nextPart = parts[partIndex + 1];
            parts.splice(partIndex + 1, 1); // Remove the next part from array
            return (
              <Text key={`${index}-${partIndex}`} style={styles.boldText}>
                {nextPart}
              </Text>
            );
          } else if (part === '__ITALIC__') {
            const nextPart = parts[partIndex + 1];
            parts.splice(partIndex + 1, 1); // Remove the next part from array
            return (
              <Text key={`${index}-${partIndex}`} style={styles.italicText}>
                {nextPart}
              </Text>
            );
          } else if (part) {
            return (
              <Text key={`${index}-${partIndex}`}>
                {part}
              </Text>
            );
          }
          return null;
        });

        return (
          <Text key={index} style={styles.normalText}>
            {elements}
          </Text>
        );
      }
    });
  };

  const saveEntry = async () => {
    if (!currentEntry) return;
    
    if (!title.trim() && !content.trim()) {
      if (typeof window !== 'undefined') {
        window.alert('Please add a title or content before saving.');
      }
      return;
    }

    const updatedEntry = {
      ...currentEntry,
      title: title.trim() || 'Untitled Entry',
      content: content.trim(),
      updatedAt: new Date()
    };

    const newEntries = [...entries];
    const existingIndex = newEntries.findIndex(e => e.id === currentEntry.id);
    
    if (existingIndex >= 0) {
      newEntries[existingIndex] = updatedEntry;
    } else {
      newEntries.unshift(updatedEntry);
    }

    setEntries(newEntries);
    await saveEntriesToStorage(newEntries);

    setCurrentEntry(null);
    setIsEditing(false);
    setTitle('');
    setContent('');
    setContentHeight(200);
  };

  const editEntry = (entry: JournalEntry) => {
    setCurrentEntry(entry);
    setTitle(entry.title);
    setContent(entry.content);
    // Calculate initial height based on content
    const lines = entry.content.split('\n').length;
    setContentHeight(Math.max(200, lines * 24 + 50));
    setIsEditing(true);
  };

  const confirmDelete = (entryId: string) => {
    setDeleteConfirmId(entryId);
  };

  const executeDelete = async () => {
    if (!deleteConfirmId) return;
    
    const newEntries = entries.filter(e => e.id !== deleteConfirmId);
    setEntries(newEntries);
    await saveEntriesToStorage(newEntries);
    
    if (currentEntry?.id === deleteConfirmId) {
      setCurrentEntry(null);
      setIsEditing(false);
      setTitle('');
      setContent('');
      setContentHeight(200);
    }
    setDeleteConfirmId(null);
  };

  const cancelDelete = () => {
    setDeleteConfirmId(null);
  };

  const cancelEdit = () => {
    if (title.trim() || content.trim()) {
      if (typeof window !== 'undefined') {
        const confirmed = window.confirm('You have unsaved changes. Are you sure you want to discard them?');
        if (!confirmed) return;
      }
    }
    setCurrentEntry(null);
    setIsEditing(false);
    setTitle('');
    setContent('');
    setContentHeight(200);
  };

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', {
      weekday: 'short',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  if (isLoading) {
    return (
      <View style={styles.container}>
        <View style={styles.loadingContainer}>
          <Text style={styles.loadingText}>Loading your journal...</Text>
        </View>
        <StatusBar style="auto" />
      </View>
    );
  }

  if (isEditing) {
    return (
      <KeyboardAvoidingView 
        style={styles.container} 
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
      >
        <View style={styles.header}>
          <TouchableOpacity onPress={cancelEdit} style={styles.backButton}>
            <Text style={styles.backButtonText}>← Back</Text>
          </TouchableOpacity>
          <Text style={styles.headerTitle}>
            {currentEntry && entries.find(e => e.id === currentEntry.id) ? 'Edit Entry' : 'New Entry'}
          </Text>
          <TouchableOpacity onPress={saveEntry} style={styles.saveButton}>
            <Text style={styles.saveButtonText}>Save</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.toolbar}>
          <TouchableOpacity onPress={applyBold} style={styles.toolbarButton}>
            <Text style={styles.toolbarButtonText}>B</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={applyItalic} style={styles.toolbarButton}>
            <Text style={styles.toolbarButtonText}>I</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={insertBullet} style={styles.toolbarButton}>
            <Text style={styles.toolbarButtonText}>•</Text>
          </TouchableOpacity>
          <TouchableOpacity onPress={insertHeading} style={styles.toolbarButton}>
            <Text style={styles.toolbarButtonText}>H</Text>
          </TouchableOpacity>
        </View>

        <ScrollView style={styles.editorContainer}>
          <TextInput
            style={styles.titleInput}
            placeholder="Entry title (optional)"
            value={title}
            onChangeText={setTitle}
            placeholderTextColor="#9ca3af"
          />
          
          <TextInput
            ref={contentInputRef}
            style={[styles.contentInput, { height: contentHeight }]}
            placeholder="Start writing your thoughts..."
            value={content}
            onChangeText={(text) => {
              setContent(text);
              // Auto-expand based on content length
              const lines = text.split('\n').length;
              const newHeight = Math.max(200, lines * 24 + 50);
              setContentHeight(newHeight);
            }}
            onSelectionChange={(event) => {
              setSelection(event.nativeEvent.selection);
            }}
            multiline
            textAlignVertical="top"
            placeholderTextColor="#9ca3af"
            scrollEnabled={false}
          />
        </ScrollView>
        
        <StatusBar style="auto" />
      </KeyboardAvoidingView>
    );
  }

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Text style={styles.title}>✨ Reflect</Text>
        <Text style={styles.subtitle}>Your Personal Journal</Text>
      </View>

      <TouchableOpacity onPress={createNewEntry} style={styles.newEntryButton}>
        <Text style={styles.newEntryButtonText}>+ New Entry</Text>
      </TouchableOpacity>

      <ScrollView style={styles.entriesContainer}>
        {entries.length === 0 ? (
          <View style={styles.emptyState}>
            <Text style={styles.emptyTitle}>No entries yet</Text>
            <Text style={styles.emptySubtitle}>
              Start your journaling journey by creating your first entry
            </Text>
          </View>
        ) : (
          entries.map(entry => (
            <View key={entry.id} style={styles.entryCard}>
              <View style={styles.entryHeader}>
                <Text style={styles.entryTitle}>
                  {entry.title || 'Untitled Entry'}
                </Text>
                <Text style={styles.entryDate}>
                  {formatDate(entry.updatedAt)}
                </Text>
              </View>
              
              <View style={styles.entryPreview}>
                {renderFormattedContent(entry.content || 'No content')}
              </View>
              
              <View style={styles.entryActions}>
                <TouchableOpacity 
                  onPress={() => editEntry(entry)} 
                  style={styles.actionButton}
                >
                  <Text style={styles.actionButtonText}>Edit</Text>
                </TouchableOpacity>
                <TouchableOpacity 
                  onPress={() => confirmDelete(entry.id)} 
                  style={[styles.actionButton, styles.deleteButton]}
                >
                  <Text style={[styles.actionButtonText, styles.deleteButtonText]}>Delete</Text>
                </TouchableOpacity>
              </View>
            </View>
          ))
        )}
      </ScrollView>

      {deleteConfirmId && (
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Delete Entry</Text>
            <Text style={styles.modalText}>
              Are you sure you want to delete this entry? This action cannot be undone.
            </Text>
            <View style={styles.modalActions}>
              <TouchableOpacity onPress={cancelDelete} style={styles.modalButton}>
                <Text style={styles.modalButtonText}>Cancel</Text>
              </TouchableOpacity>
              <TouchableOpacity onPress={executeDelete} style={[styles.modalButton, styles.modalDeleteButton]}>
                <Text style={[styles.modalButtonText, styles.modalDeleteButtonText]}>Delete</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>
      )}
      
      <StatusBar style="auto" />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ffffff',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  loadingText: {
    fontSize: 18,
    color: '#64748b',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    padding: 20,
    paddingTop: 60,
    backgroundColor: '#ffffff',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1e293b',
  },
  backButton: {
    padding: 8,
  },
  backButtonText: {
    fontSize: 16,
    color: '#6366f1',
    fontWeight: '500',
  },
  saveButton: {
    backgroundColor: '#6366f1',
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 6,
  },
  saveButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
  toolbar: {
    flexDirection: 'row',
    padding: 12,
    backgroundColor: '#f8fafc',
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
    gap: 8,
  },
  toolbarButton: {
    paddingHorizontal: 12,
    paddingVertical: 8,
    borderRadius: 6,
    backgroundColor: '#ffffff',
    borderWidth: 1,
    borderColor: '#e5e7eb',
  },
  toolbarButtonText: {
    fontSize: 14,
    fontWeight: '600',
    color: '#374151',
  },
  title: {
    fontSize: 28,
    fontWeight: 'bold',
    color: '#6366f1',
    textAlign: 'center',
  },
  subtitle: {
    fontSize: 16,
    color: '#64748b',
    textAlign: 'center',
    marginTop: 4,
  },
  newEntryButton: {
    backgroundColor: '#6366f1',
    margin: 20,
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
  },
  newEntryButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '600',
  },
  entriesContainer: {
    flex: 1,
    padding: 20,
  },
  emptyState: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    paddingVertical: 60,
  },
  emptyTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 8,
  },
  emptySubtitle: {
    fontSize: 16,
    color: '#64748b',
    textAlign: 'center',
  },
  entryCard: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 16,
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  entryHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 8,
  },
  entryTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#1e293b',
    flex: 1,
  },
  entryDate: {
    fontSize: 12,
    color: '#64748b',
    marginLeft: 8,
  },
  entryPreview: {
    marginBottom: 12,
  },
  normalText: {
    fontSize: 14,
    color: '#64748b',
    lineHeight: 20,
  },
  boldText: {
    fontWeight: 'bold',
  },
  italicText: {
    fontStyle: 'italic',
  },
  headingText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#1e293b',
    marginTop: 8,
    marginBottom: 4,
  },
  bulletText: {
    fontSize: 14,
    color: '#64748b',
    lineHeight: 20,
    marginLeft: 20,
  },
  entryActions: {
    flexDirection: 'row',
    gap: 8,
  },
  actionButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
    backgroundColor: '#f3f4f6',
  },
  actionButtonText: {
    fontSize: 14,
    color: '#374151',
    fontWeight: '500',
  },
  deleteButton: {
    backgroundColor: '#fef2f2',
  },
  deleteButtonText: {
    color: '#dc2626',
  },
  editorContainer: {
    flex: 1,
    padding: 20,
  },
  titleInput: {
    fontSize: 24,
    fontWeight: '600',
    color: '#1e293b',
    marginBottom: 20,
    padding: 0,
  },
  contentInput: {
    fontSize: 16,
    color: '#374151',
    lineHeight: 24,
    padding: 0,
    minHeight: 200,
  },
  modalOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  modalContent: {
    backgroundColor: '#ffffff',
    borderRadius: 12,
    padding: 24,
    margin: 20,
    maxWidth: 400,
    width: '100%',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#1e293b',
    marginBottom: 12,
  },
  modalText: {
    fontSize: 16,
    color: '#64748b',
    lineHeight: 24,
    marginBottom: 24,
  },
  modalActions: {
    flexDirection: 'row',
    gap: 12,
    justifyContent: 'flex-end',
  },
  modalButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    borderRadius: 6,
    backgroundColor: '#f3f4f6',
  },
  modalButtonText: {
    fontSize: 14,
    color: '#374151',
    fontWeight: '500',
  },
  modalDeleteButton: {
    backgroundColor: '#fef2f2',
  },
  modalDeleteButtonText: {
    color: '#dc2626',
  },
});
